"""
    Copyright 2016 Inmanta

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Contact: code@inmanta.com
"""
import ip
import monitoring
import ip::services

entity Agent extends NetworkInput, NetworkOutput:
    """
        A collectd agent that collects metrics

        :param forward: Instruct the network plugin to forward inputs to outputs
    """
    bool forward=false
end

#Agent agent [1] -- [1] std::File cfg_dir

entity NetworkInput extends ip::services::Server:
    """
        A collectd network input: accepts metrics using the collectd network protocol.
    """
end

entity NetworkOutput extends ip::services::BaseClient:
    """
        A collectd network output: sends metrics over the network using the collect protocol.
    """
end

entity Plugin:
    """
        A collectd plugin that collects metrics
    """
end

Plugin plugins [0:] -- [1] Agent agent 

NetworkInput inputs [0:] -- [0:] NetworkOutput outputs


implementation collectdAgent for Agent:
    cfg_file = std::ConfigFile(host=host, path="/etc/collectd.conf", requires=pkg,
        content=std::template("collectd/collectd.conf.tmpl"), reload=true)
    cfg_dir = std::DefaultDirectory(host=host, path="/etc/collectd.d", requires=pkg)

    network_cfg = std::ConfigFile(host=host, path="/etc/collectd.d/network.conf", reload=true,
                                  content=std::template("collectd/network.conf.tmpl"), requires=pkg)

    pkg = std::Package(host=host, name="collectd", state="installed")
    svc = std::Service(host=host, name="collectd", state="running", onboot=true)
    svc.requires = [cfg_dir, cfg_file, pkg, network_cfg]
end

implementation collectdAgentUbuntu for Agent:
    cfg_file = std::ConfigFile(host=host, path="/etc/collectd/collectd.conf", requires=pkg,
        content=std::template("collectd/collectd.conf.ubuntu.tmpl"), reload=true)
    cfg_dir = std::DefaultDirectory(host=host, path="/etc/collectd/collectd.conf.d", requires=pkg)

    pkg = std::Package(host=host, name="collectd", state="installed")
    svc = std::Service(host=host, name="collectd", state="running", onboot=true)
    svc.requires = [cfg_dir, cfg_file, pkg]
end

implement Agent using collectdAgent when std::familyof(host.os, "rhel") or std::familyof(host.os, "fedora")
implement Agent using collectdAgentUbuntu when std::familyof(host.os, "ubuntu")


entity Varnish extends Plugin:
    """
        Enable the Varnish collectd plugin
    """
end


implementation varnish for Varnish:
#make path rel to agent.cfg_dir
    cfg_file = std::ConfigFile(host=agent.host, path="/etc/collectd.d/varnish.conf",
                               content=std::template("collectd/varnish.conf.tmpl"), reload=true)
    pkg = std::Package(host=agent.host, name="collectd-varnish", state="installed")
end

implement Varnish using varnish
